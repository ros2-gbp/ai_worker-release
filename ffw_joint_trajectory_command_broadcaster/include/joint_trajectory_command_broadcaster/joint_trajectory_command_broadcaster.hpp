// Copyright 2017 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef JOINT_TRAJECTORY_COMMAND_BROADCASTER__JOINT_TRAJECTORY_COMMAND_BROADCASTER_HPP_
#define JOINT_TRAJECTORY_COMMAND_BROADCASTER__JOINT_TRAJECTORY_COMMAND_BROADCASTER_HPP_

#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include "control_msgs/msg/dynamic_joint_state.hpp"
#include "controller_interface/controller_interface.hpp"
#include "joint_trajectory_command_broadcaster/visibility_control.h"
// auto-generated by generate_parameter_library
#include \
  <ffw_joint_trajectory_command_broadcaster/joint_trajectory_command_broadcaster_parameters.hpp>
#include "realtime_tools/realtime_publisher.hpp"
#include "sensor_msgs/msg/joint_state.hpp"
#include "urdf/model.h"
#include "trajectory_msgs/msg/joint_trajectory.hpp"
#include "rclcpp/subscription.hpp"

namespace joint_trajectory_command_broadcaster
{
/**
 * \brief Joint Trajectory Command Broadcaster for leader-follower control in a ros2_control system.
 *
 * JointStateBroadcaster publishes state interfaces from ros2_control as ROS messages.
 * There is a possibility to publish all available states (typical use), or only specific ones.
 * The latter is, for example, used when hardware provides multiple measurement sources for some
 * of its states, e.g., position.
 * It is possible to define a mapping of measurements
 * from different sources stored in custom interfaces to standard dynamic names in JointState
 * message.
 * If "joints" or "interfaces" parameter is empty, all available states are published.
 *
 * \param use_local_topics Flag to publish topics in local namespace.
 * \param joints Names of the joints to publish.
 * \param interfaces Names of interfaces to publish.
 * \param map_interface_to_joint_state.{HW_IF_POSITION|HW_IF_VELOCITY|HW_IF_EFFORT} mapping
 * between custom interface names and standard names in sensor_msgs::msg::JointState message.
 *
 * Publishes to:
 * - \b joint_states (sensor_msgs::msg::JointState): Joint states related to movement
 * (position, velocity, effort).
 * - \b dynamic_joint_states (control_msgs::msg::DynamicJointState): Joint states regardless of
 * its interface type.
 */
class JointTrajectoryCommandBroadcaster : public controller_interface::ControllerInterface
{
public:
  JOINT_TRAJECTORY_COMMAND_BROADCASTER_PUBLIC
  JointTrajectoryCommandBroadcaster();

  JOINT_TRAJECTORY_COMMAND_BROADCASTER_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  JOINT_TRAJECTORY_COMMAND_BROADCASTER_PUBLIC
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  JOINT_TRAJECTORY_COMMAND_BROADCASTER_PUBLIC
  controller_interface::return_type update(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  JOINT_TRAJECTORY_COMMAND_BROADCASTER_PUBLIC
  controller_interface::CallbackReturn on_init() override;

  JOINT_TRAJECTORY_COMMAND_BROADCASTER_PUBLIC
  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  JOINT_TRAJECTORY_COMMAND_BROADCASTER_PUBLIC
  controller_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  JOINT_TRAJECTORY_COMMAND_BROADCASTER_PUBLIC
  controller_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

protected:
  bool init_joint_data();
  void joint_states_callback(const sensor_msgs::msg::JointState::SharedPtr msg);
  bool check_joints_synced() const;
  double calculate_mean_error() const;
  void update_trigger_state(const rclcpp::Time & current_time);
  bool check_trigger_active() const;

protected:
  // Optional parameters
  std::shared_ptr<ParamListener> param_listener_;
  Params params_;
  std::unordered_map<std::string, std::string> map_interface_to_joint_state_;

  std::vector<std::string> joint_names_;
  std::vector<double> joint_offsets_;

  // Multiple publishers for different joint groups (left/right)
  std::unordered_map<std::string,
    std::shared_ptr<rclcpp::Publisher<trajectory_msgs::msg::JointTrajectory>>>
  joint_trajectory_publishers_;
  std::unordered_map<std::string,
    std::shared_ptr<realtime_tools::RealtimePublisher<trajectory_msgs::msg::JointTrajectory>>>
  realtime_joint_trajectory_publishers_;

  // Joint groups configuration
  std::unordered_map<std::string, std::vector<std::string>> group_joint_names_;
  std::unordered_map<std::string, std::vector<double>> group_joint_offsets_;
  std::unordered_map<std::string, std::string> group_topic_names_;
  std::unordered_map<std::string, std::vector<std::string>> group_reverse_joints_;
  std::vector<std::string> trajectory_groups_;

  std::unordered_map<std::string, std::unordered_map<std::string, double>> name_if_value_mapping_;

  urdf::Model model_;
  bool is_model_loaded_ = false;

  // Follower joint states tracking
  std::shared_ptr<rclcpp::Subscription<sensor_msgs::msg::JointState>> joint_states_subscriber_;
  std::unordered_map<std::string, double> follower_joint_positions_;
  bool joints_synced_ = false;
  bool first_publish_ = true;

  // Trigger-based auto mode control
  enum class AutoMode
  {
    STOPPED,     // pause mode
    ACTIVE       // follow mode (slowly following)
  };

  AutoMode auto_mode_ = AutoMode::STOPPED;
  rclcpp::Time trigger_start_time_{0, 0, RCL_ROS_TIME};  // Initialize to zero time
  bool trigger_counting_ = false;
  bool mode_changed_in_this_trigger_ = false;
};

}  // namespace joint_trajectory_command_broadcaster

#endif  // JOINT_TRAJECTORY_COMMAND_BROADCASTER__JOINT_TRAJECTORY_COMMAND_BROADCASTER_HPP_
